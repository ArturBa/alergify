# https://editor.swagger.io/
# openapi: 3.0.0
# info:
#   title: Alergify API
#   description: Alergify - find your allergies
#   version: *.*.*

tags:
  - name: auth
    description: auth API
  - name: user
    description: user API
  - name: food
    description: food API
  - name: ingredient
    description: ingredient API
  - name: product
    description: product API
  - name: symptom
    description: symptom API

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    id:
      name: id
      in: path
      description: id of the object
      required: true
      schema:
        type: integer
        format: int64
    get-food-log:
      in: query
      name: paginate food logs
      schema:
        allOf:
          - $ref: '#/components/schemas/param-paginate'
          - $ref: '#/components/schemas/param-date'
    get-symptom-log:
      in: query
      name: paginate symptom logs
      schema:
        allOf:
          - $ref: '#/components/schemas/param-paginate'
          - $ref: '#/components/schemas/param-date'
    get-ingredients:
      in: query
      name: find ingredient
      schema:
        allOf:
          - $ref: '#/components/schemas/param-paginate'
          - $ref: '#/components/schemas/ingredient'
    get-products:
      in: query
      name: find product
      schema:
        allOf:
          - $ref: '#/components/schemas/param-paginate'
          - $ref: '#/components/schemas/product'
    get-foods:
      in: query
      name: find product
      schema:
        allOf:
          - $ref: '#/components/schemas/param-paginate'
          - $ref: '#/components/schemas/food'
  schemas:
    auth-jwt:
      type: object
      properties:
        expiresIn:
          type: integer
          description: validity time of access token in seconds
        accessToken:
          type: string
        refreshToken:
          type: string
    user:
      type: object
      properties:
        username:
          type: string
          description: user name
        email:
          type: string
          format: email
          description: user Email
    user-create:
      type: object
      allOf:
        - $ref: '#/components/schemas/user'
        - type: object
          properties:
            password:
              type: string
              description: user Password
    id:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
    paginate-response:
      type: object
      properties:
        total:
          type: integer
          format: int64
    food:
      type: object
      properties:
        name:
          type: string
          description: food name
    food-log:
      type: object
      properties:
        date:
          type: string
          format: date-time
          description: iso8601 string
    food-log-create:
      type: object
      required:
        - date
        - ingredients
        - products
      allOf:
        - $ref: '#/components/schemas/food-log'
        - type: object
          properties:
            ingredients:
              type: array
              items:
                type: integer
                description: id of the ingredient
            products:
              type: array
              items:
                type: integer
                description: id of the product
    food-log-get:
      type: object
      allOf:
        - $ref: '#/components/schemas/food-log'
        - type: object
          properties:
            ingredients:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/ingredient'
            products:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/product'
    food-log-update:
      type: object
      allOf:
        - $ref: '#/components/schemas/food-log-create'
        - $ref: '#/components/schemas/id'
    ingredient:
      type: object
      properties:
        name:
          type: string
          description: ingredient name
    ingredient-create:
      type: object
      required:
        - name
      allOf:
        - $ref: '#/components/schemas/ingredient'
    product:
      type: object
      properties:
        name:
          type: string
          description: product name
        barcode:
          type: number
          description: product barcode
    product-create:
      type: object
      required:
        - name
        - barcode
        - ingredients
      allOf:
        - $ref: '#/components/schemas/product'
        - type: object
          properties:
            ingredients:
              type: array
              items:
                type: integer
                description: id of the ingredient
    product-get:
      type: object
      allOf:
        - $ref: '#/components/schemas/product'
        - $ref: '#/components/schemas/id'
        - type: object
          properties:
            ingredients:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/ingredient'
    symptom:
      type: object
      properties:
        name:
          type: string
          description: symptom name
    symptom-get:
      type: object
      allOf:
        - $ref: '#/components/schemas/id'
        - $ref: '#/components/schemas/symptom'
    intensity-log:
      type: object
      properties:
        symptomId:
          type: integer
          format: int64
        value:
          description: intensity of the symptom in range [1, 10]
          type: integer
          format: int64
    symptom-log:
      type: object
      properties:
        date:
          type: string
          format: date-time
          description: iso8601 string
    symptom-log-get:
      type: object
      allOf:
        - $ref: '#/components/schemas/id'
        - $ref: '#/components/schemas/symptom-log'
        - type: object
          properties:
            intensityLogs:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/intensity-log'
    symptom-log-create:
      type: object
      allOf:
        - $ref: '#/components/schemas/symptom-log'
        - type: object
          properties:
            intensityLogs:
              type: array
              items:
                $ref: '#/components/schemas/intensity-log'
    param-paginate:
      type: object
      properties:
        start:
          type: integer
          format: int64
          description: start pagination. Default to 0
          default: 0
        limit:
          type: integer
          format: int64
          description: limit pagination. Default to 10
          default: 10
    param-date:
      type: object
      properties:
        startDate:
          type: string
          format: date-time
          description: start date iso8601 string
        endDate:
          type: string
          format: date-time
          description: start date iso8601 string

security:
  - bearerAuth: []

paths:
  /signup:
    post:
      tags:
        - auth
      summary: Sign up user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-create'
      responses:
        200:
          description: OK
  /login:
    post:
      tags:
        - auth
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-create'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-jwt'
  /logout:
    post:
      security:
        - bearerAuth: []
      tags:
        - auth
      summary: Logout user
      responses:
        '200':
          description: OK
  /refresh-token:
    post:
      security:
        - bearerAuth: []
      tags:
        - auth
      summary: Refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-jwt'

  /me:
    get:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Get user info
      responses:
        200:
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    put:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Update user info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-create'
      responses:
        200:
          description: OK
    delete:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Delete user
      responses:
        200:
          description: OK

  /foods:
    get:
      security:
        - bearerAuth: []
      tags:
        - food
      summary: Find foods (products + ingredients) with favor of ingredients
      parameters:
        - $ref: '#/components/parameters/get-foods'
      responses:
        200:
          description: Products
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/paginate-response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/food'
                            - $ref: '#/components/schemas/id'
                            - type: object
                              properties:
                                type:
                                  type: string
                                  description: type of the food
                                  enum:
                                    - product
                                    - ingredient
  /food-log:
    post:
      security:
        - bearerAuth: []
      tags:
        - food
      summary: Add a food log
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: One of the arrays needs to be filled
              $ref: '#/components/schemas/food-log-create'
      responses:
        '201':
          description: 'Created'
    get:
      tags:
        - food
      security:
        - bearerAuth: []
      summary: Get user's food logs
      parameters:
        - $ref: '#/components/parameters/get-food-log'
      responses:
        '200':
          description: User's food logs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/paginate-response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/food-log-get'
                            - $ref: '#/components/schemas/id'
    put:
      security:
        - bearerAuth: []
      tags:
        - food
      summary: Update a food log
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: One of the arrays needs to be not empty
              $ref: '#/components/schemas/food-log-update'
      responses:
        '200':
          description: 'OK'
  /food-log/{id}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - food
      summary: Delete food log by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: 'OK'

  /ingredient:
    post:
      security:
        - bearerAuth: []
      tags:
        - ingredient
      summary: Add an ingredient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ingredient-create'
      responses:
        '201':
          description: 'Created'
    get:
      security:
        - bearerAuth: []
      tags:
        - ingredient
      summary: Find ingredients
      parameters:
        - $ref: '#/components/parameters/get-ingredients'
      responses:
        200:
          description: Ingredients
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/paginate-response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/ingredient'
                            - $ref: '#/components/schemas/id'
  /ingredient/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - ingredient
      summary: Get an ingredient
      parameters:
        - name: id
          in: path
          description: ingredient ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Ingredient
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ingredient'
                  - $ref: '#/components/schemas/id'

  /product:
    post:
      security:
        - bearerAuth: []
      tags:
        - product
      summary: Add an product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product-create'
      responses:
        '201':
          description: 'Created'
    get:
      security:
        - bearerAuth: []
      tags:
        - product
      summary: Get products
      parameters:
        - $ref: '#/components/parameters/get-products'
      responses:
        200:
          description: Products
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/paginate-response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/product'
                            - $ref: '#/components/schemas/id'
  /product/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - product
      summary: Get an product
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: product
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/product-get'

  /symptoms:
    get:
      security:
        - bearerAuth: []
      tags:
        - symptom
      responses:
        200:
          description: Symptoms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/symptom-get'

  /symptom-log:
    get:
      security:
        - bearerAuth: []
      tags:
        - symptom
      parameters:
        - $ref: '#/components/parameters/get-symptom-log'
      responses:
        200:
          description: Symptoms
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/paginate-response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/symptom-log-get'
                            - $ref: '#/components/schemas/id'
    post:
      security:
        - bearerAuth: []
      tags:
        - symptom
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/symptom-log-create'
      responses:
        201:
          description: Created
    put:
      security:
        - bearerAuth: []
      tags:
        - symptom
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/symptom-log-create'
                - $ref: '#/components/schemas/id'
      responses:
        200:
          description: OK
  /symptom-log/{id}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - symptom
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: OK
