# https://editor.swagger.io/
openapi: 3.0.1
info:
  title: Alergetic RestApi
  version: 0.1.0
tags:
  - name: auth
    description: auth API
  - name: food
    description: food API
  - name: ingredient
    description: ingredient API
  - name: product
    description: product API

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    auth-jwt:
      type: object
      properties:
        expiresIn:
          type: integer
          description: vality time of access token in seconds
        accessToken:
          type: string
        refreshToken:
          type: string
    user:
      type: object
      required:
        - email
        - password
      properties:
        username:
          type: integer
          description: user Id
        email:
          type: string
          format: email
          description: user Email
        password:
          type: string
          description: user Password
security:
  - bearerAuth: []
  
paths:
  /signup:
    post:
      tags:
        - auth
      summary: Sign up user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-jwt'


  /login:
    post:
      tags:
        - auth
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: A list of users
          
  /logout:
    post:
      tags:
        - auth
      summary: Logout user
      responses:
        '200':
          description: OK
          
  /refresh-token:
    post:
      tags:
        - auth
      summary: Refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-jwt'


  /food:
    post:
      tags:
        - food
      summary: Add a food log
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: One of the arrays needs to be not empty
              type: object
              required:
                - date
                - ingredients
                - products
              properties:
                date:
                  type: string
                  format: date-time
                  description: iso8601 string
                ingredients:
                  type: array
                  items: 
                    type: integer
                products:
                  type: array
                  items: 
                    type: integer
      responses:
        '201':
          description: 'Created'
    get:
      tags:
        - food
      summary: Get user's food logs
      description: Pagination will be added
      responses:
        '200':
          description: User's food logs
          content:
            application/json:
              schema:
                description: One of the arrays needs to be not empty
                type: array
                items:
                  properties:
                    date:
                      type: string
                      format: date-time
                      description: iso8601 string
                    ingredients:
                      type: array
                      items: 
                        type: object
                        properties:
                          id: 
                            type: integer
                          name: 
                            type: string
                    products:
                      type: array
                      items: 
                        type: object
                        properties:
                          id: 
                            type: integer
                          name: 
                            type: string

  /ingredient:
    post: 
      tags:
        - ingredient
      summary: Add an ingredient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '201':
          description: 'Created'
  /ingredient/{id}:
    get: 
      tags:
        - ingredient
      summary: Get an ingredient
      parameters:
        - name: id
          in: path
          description: ingredient ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Ingredient
          content:
            application/json:
              schema:
                description: One of the arrays needs to be not empty
                type: object
                properties:
                  id:
                    type: integer
                  name: 
                    type: string
  
  
  /product:
    post: 
      tags:
        - product
      summary: Add an product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - ingredients
              properties:
                name:
                  type: string
                ingredients:
                  type: array
                  items: 
                    type: integer
                barcode:
                  type: integer
      responses:
        '201':
          description: 'Created'
  /product/{id}:
    get: 
      tags:
        - product
      summary: Get an product
      parameters:
        - name: id
          in: path
          description: product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: product
          content:
            application/json:
              schema:
                description: One of the arrays needs to be not empty
                type: object
                properties:
                  id:
                    type: integer
                  barcode:
                    type: integer
                  name: 
                    type: string
                  ingredients:
                    type: array
                    items: 
                      type: object
                      properties:
                        id: 
                          type: integer
                        name: 
                          type: string
                          
  /me:
    get: 
      tags:
        - user
      summary: Get user info
      responses:
        200:
          description: User info
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  username: 
                    type: string
    put:
      tags:
        - user
      summary: Update user info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        200:
          description: Ok
    delete:
      tags:
        - user
      summary: Delete user
      responses:
        200:
          description: Ok
